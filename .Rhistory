#Exercise
p <- ggplot(df, aes(x=gdp_per_capita, y=Electricity_consumption_per_capita)) +
geom_point()
p + facet_grid(Country ~ .) #Horizontally Arranged
p + facet_grid(. ~ Country) #Vertically Arranged
p + facet_wrap(~Country)
#Activity B
pb1<-ggplot(df3,aes(x=loan_amnt))
pb2<-pb1+geom_histogram(bins=10,fill="cadetblue4")
#Facet_wrap
pb3<-pb2+facet_wrap(~grade)
#Free y coordinate for the subplots
pb4<-pb3+facet_wrap(~grade, scale="free_y")
#Topic C: Visual components - Color and shape Differentiated
#Exercise - Using colors in plots
var1<-"Electricity_consumption_per_capita"
var2<-"gdp_per_capita"
name1<- "Electricity/capita"
name2<- "GDP/capita"
# Change color and shape of points
p1<- ggplot(dfs,aes_string(x=var1,y=var2))+
geom_point(color=2,shape=2)+xlim(0,10000)+xlab(name1)+ylab(name2)
#Grouping points by a variable mapped to colour and shape
p2 <- ggplot(dfs,aes_string(x=var1,y=var2))+
geom_point(aes(color=Country,shape=Country))+xlim(0,10000)+xlab(name1)+ylab(name2)
grid.arrange(p1, p2, nrow = 2)
#Exercise
#Boxplot - color differentiated.
ggplot(df2,aes(x=GradeID,y=VisitedResources))+geom_boxplot(aes(fill=Class))
#Activity C:
#color differentiate with credit grade.
dfn <- df3[,c("home_ownership","loan_amnt","grade")]
dfn <- na.omit(dfn)
dfn <- subset(dfn, !dfn$home_ownership %in% c("NONE"))
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))
#People with higher credit grades take smaller loans
#People with lower credit grades take small loans if they don't have a mortgage.
#Themes
#Exercise
dfn <- subset(HollywoodMovies, Genre %in% c("Action","Adventure","Comedy","Drama","Romance")
& LeadStudio %in% c("Fox","Sony","Columbia","Paramount","Disney"))
p1 <- ggplot(dfn,aes(Genre,WorldGross))
p2 <- p1+geom_bar(stat="Identity",aes(fill=LeadStudio),position="dodge")
p3 <- p2+theme(axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15),
plot.background=element_rect(fill="gray87"),
panel.background = element_rect(fill="beige"),
panel.grid.major = element_line(color="Gray",linetype=1)
)
#Using predefined themes - Just show slide
p4 <- p2+theme_bw()+ggtitle("theme_bw()")
p5 <- p2+theme_classic()+ggtitle("theme_classic()")
p6 <- p2+theme_classic()+ggtitle("theme_gray()")
p7 <- p2+theme_minimal()+ggtitle("theme_minimal()")
grid.arrange(p4,p5,p6,p7,nrow=2,ncol=2)
#Exercise : Create your own theme
mytheme <- theme(legend.title = element_blank(),
legend.position ="bottom",
text = element_text(colour="Blue"),
axis.text = element_text(size=12,color="Red"),
axis.title = element_text(size = rel(1.5)))
p2 <- p2+ggtitle("Original Plot")
p8 <- p2+mytheme+ggtitle("Changed Plot with my theme")
p8
grid.arrange(p2,p8,ncol=2)
#Activity D: Use themes and color differentiation in a plot.
pd1 <- ggplot(df,aes(x=BMI_male,y=BMI_female))
pd2 <- pd1+geom_point()
pd3 <- pd1+geom_point(aes(color=Country),size=2)+
scale_colour_brewer(palette="Dark2")
pd4 <- pd3+theme(axis.title=element_text(size=15,color="cadetblue4",
face="bold"),
plot.title=element_text(color="cadetblue4",size=18,
face="bold.italic"),
panel.background = element_rect(fill="azure",color="black"),
panel.grid=element_blank(),
legend.position="bottom",
legend.justification="left",
legend.title = element_blank(),
legend.key = element_rect(color=3,fill="gray97")
)+
xlab("BMI Male")+
ylab("BMI female")+
ggtitle("BMI female vs BMI Male")
pd4
#Geoms and statistics
#Groupby and summarizing
#Group the movies by Genre
ggplot(HollywoodMovies,aes(Genre,AudienceScore))+geom_point()+theme(axis.text.x=element_text(angle=40))
gp_scr <- group_by(HollywoodMovies,Genre)
gp_scr <- na.omit(gp_scr)
#Calculate mean and SD for AudienceScore for a given Genre.
dfnew <- dplyr::summarise(gp_scr,as_mean=mean(AudienceScore),
as_sd=sd(AudienceScore),n=n())
#Print
dfnew
#We need to order according to AS Mean.
dfnew <- dfnew[order(dfnew$as_mean), ]
#Plot
pg1 <- ggplot(data = dfnew, aes(x=Genre,y=as_mean))
#Note: R orders the names alphabetically. We don't want that.
#Change the ordering of levels to keep Genres unordered.
dfnew$Genre <-factor(dfnew$Genre, levels = dfnew$Genre)
#New Plot
pg2 <- ggplot(data = dfnew, aes(x=Genre,y=as_mean))
pg2 + geom_point()+
geom_errorbar(color="red",aes(ymin=as_mean-(as_sd/sqrt(n-1)), ymax = as_mean+
(as_sd/sqrt(n-1))))+ylab("Audiencescore Mean")+
theme(axis.text = element_text(angle=90))
p1<- ggplot(df,aes_string(x=var1,y=var2))+
geom_point(color=2,shape=2)+xlim(0,10000)+xlab(name1)+ylab(name2)
#Grouping points by a variable mapped to colour and shape
p2 <- ggplot(df,aes_string(x=var1,y=var2))+
geom_point(aes(color=Country,shape=Country))+xlim(0,10000)+xlab(name1)+ylab(name2)
grid.arrange(p1, p2, nrow = 2)
#Exercise - Layers
p1 <- ggplot(df,aes(x=Electricity_consumption_per_capita))
p2 <- p1+geom_histogram()
p3 <- p1+geom_histogram(bins=15)
p4 <- p3+xlab("Electricity consumption per capita")
p4
#Exercise- Scales
p1 <- ggplot(df,aes(x=gdp_per_capita))
p2 <- p1+geom_histogram()
p2
#Where does the maximum occur? We need to have a finer labelling to answer
#the question
p2 + scale_x_continuous(breaks=seq(0,40000,4000) )
#Coordinates - Differentiating between cartesian and polar coordinates.
#Generate some random time numbers
t <- seq(0, 360, by=15)
r <- 2
qplot(r,t)+coord_polar(theta="y")+scale_y_continuous(breaks=seq(0,360,30))
#Activity A
pA <- ggplot(df, aes(x=gdp_per_capita, y=Electricity_consumption_per_capita)) +
geom_point() +
scale_x_continuous(name="GDP",breaks = seq(0,50000,5000),
labels=scales::unit_format("K", 1e-3)) +
scale_y_continuous(name="Electricity Consumption",
breaks = seq(0,20000,2000),
labels=scales::unit_format("K", 1e-3))
pA
#Facet
#Exercise
p <- ggplot(df, aes(x=gdp_per_capita, y=Electricity_consumption_per_capita)) +
geom_point()
p + facet_grid(Country ~ .) #Horizontally Arranged
p + facet_grid(. ~ Country) #Vertically Arranged
p + facet_wrap(~Country)
#Activity B
pb1<-ggplot(df3,aes(x=loan_amnt))
pb2<-pb1+geom_histogram(bins=10,fill="cadetblue4")
#Facet_wrap
pb3<-pb2+facet_wrap(~grade)
#Free y coordinate for the subplots
pb4<-pb3+facet_wrap(~grade, scale="free_y")
#Topic C: Visual components - Color and shape Differentiated
#Exercise - Using colors in plots
var1<-"Electricity_consumption_per_capita"
var2<-"gdp_per_capita"
name1<- "Electricity/capita"
name2<- "GDP/capita"
# Change color and shape of points
p1<- ggplot(df,aes_string(x=var1,y=var2))+
geom_point(color=2,shape=2)+xlim(0,10000)+xlab(name1)+ylab(name2)
#Grouping points by a variable mapped to colour and shape
p2 <- ggplot(df,aes_string(x=var1,y=var2))+
geom_point(aes(color=Country,shape=Country))+xlim(0,10000)+xlab(name1)+ylab(name2)
grid.arrange(p1, p2, nrow = 2)
#Exercise
#Boxplot - color differentiated.
ggplot(df2,aes(x=GradeID,y=VisitedResources))+geom_boxplot(aes(fill=Class))
#Activity C:
#color differentiate with credit grade.
dfn <- df3[,c("home_ownership","loan_amnt","grade")]
dfn <- na.omit(dfn)
dfn <- subset(dfn, !dfn$home_ownership %in% c("NONE"))
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))
#People with higher credit grades take smaller loans
#People with lower credit grades take small loans if they don't have a mortgage.
#Themes
#Exercise
dfn <- subset(HollywoodMovies, Genre %in% c("Action","Adventure","Comedy","Drama","Romance")
& LeadStudio %in% c("Fox","Sony","Columbia","Paramount","Disney"))
p1 <- ggplot(dfn,aes(Genre,WorldGross))
p2 <- p1+geom_bar(stat="Identity",aes(fill=LeadStudio),position="dodge")
p3 <- p2+theme(axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15),
plot.background=element_rect(fill="gray87"),
panel.background = element_rect(fill="beige"),
panel.grid.major = element_line(color="Gray",linetype=1)
)
#Using predefined themes - Just show slide
p4 <- p2+theme_bw()+ggtitle("theme_bw()")
p5 <- p2+theme_classic()+ggtitle("theme_classic()")
p6 <- p2+theme_classic()+ggtitle("theme_gray()")
p7 <- p2+theme_minimal()+ggtitle("theme_minimal()")
grid.arrange(p4,p5,p6,p7,nrow=2,ncol=2)
#Exercise : Create your own theme
mytheme <- theme(legend.title = element_blank(),
legend.position ="bottom",
text = element_text(colour="Blue"),
axis.text = element_text(size=12,color="Red"),
axis.title = element_text(size = rel(1.5)))
p2 <- p2+ggtitle("Original Plot")
p8 <- p2+mytheme+ggtitle("Changed Plot with my theme")
p8
grid.arrange(p2,p8,ncol=2)
#Activity D: Use themes and color differentiation in a plot.
pd1 <- ggplot(df,aes(x=BMI_male,y=BMI_female))
pd2 <- pd1+geom_point()
pd3 <- pd1+geom_point(aes(color=Country),size=2)+
scale_colour_brewer(palette="Dark2")
pd4 <- pd3+theme(axis.title=element_text(size=15,color="cadetblue4",
face="bold"),
plot.title=element_text(color="cadetblue4",size=18,
face="bold.italic"),
panel.background = element_rect(fill="azure",color="black"),
panel.grid=element_blank(),
legend.position="bottom",
legend.justification="left",
legend.title = element_blank(),
legend.key = element_rect(color=3,fill="gray97")
)+
xlab("BMI Male")+
ylab("BMI female")+
ggtitle("BMI female vs BMI Male")
pd4
#Geoms and statistics
#Groupby and summarizing
#Group the movies by Genre
ggplot(HollywoodMovies,aes(Genre,AudienceScore))+geom_point()+theme(axis.text.x=element_text(angle=40))
gp_scr <- group_by(HollywoodMovies,Genre)
gp_scr <- na.omit(gp_scr)
#Calculate mean and SD for AudienceScore for a given Genre.
dfnew <- dplyr::summarise(gp_scr,as_mean=mean(AudienceScore),
as_sd=sd(AudienceScore),n=n())
#Print
dfnew
#We need to order according to AS Mean.
dfnew <- dfnew[order(dfnew$as_mean), ]
#Plot
pg1 <- ggplot(data = dfnew, aes(x=Genre,y=as_mean))
#Note: R orders the names alphabetically. We don't want that.
#Change the ordering of levels to keep Genres unordered.
dfnew$Genre <-factor(dfnew$Genre, levels = dfnew$Genre)
#New Plot
pg2 <- ggplot(data = dfnew, aes(x=Genre,y=as_mean))
pg2 + geom_point()+
geom_errorbar(color="red",aes(ymin=as_mean-(as_sd/sqrt(n-1)), ymax = as_mean+
(as_sd/sqrt(n-1))))+ylab("Audiencescore Mean")+
theme(axis.text = element_text(angle=90))
p1 <- ggplot(df,aes(x=gdp_per_capita))
p1
p2 <- p1+geom_histogram()
p2
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))+
scale_x_continuous(breaks=seq(0,40000,2000))
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))+
scale_x_continuous(breaks=seq(0,40000,2000))
ggplot(df2,aes(x=GradeID,y=VisitedResources))+geom_boxplot(aes(fill=Class))
#color differentiate with credit grade.
dfn <- df3[,c("home_ownership","loan_amnt","grade")]
dfn <- na.omit(dfn)
dfn <- subset(dfn, !dfn$home_ownership %in% c("NONE"))
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))
#People with higher credit grades take smaller loans
#People with lower credit grades take small loans if they don't have a mortgage.
#Finer labelling in y to answer 5c
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))+
scale_x_continuous(breaks=seq(0,40000,2000))
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))+
scale_x_discrete(breaks=seq(0,40000,2000))
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))+
scale_y_continuous(breaks=seq(0,40000,2000))
ggplot(RetailSales,aes(x=Month,y=Sales)) + geom_bar(stat="identity")
require("ggplot2")
require("tibble")
require("dplyr")
require("Lock5Data")
ggplot(RetailSales,aes(x=Month,y=Sales)) + geom_bar(stat="identity")
require("ggplot2")
require("tibble")
require("dplyr")
require("Lock5Data")
require("zoo")
require("corrplot")
require("maps")
require("mapproj")
#Load the data files
df <- read.csv("../data/gapminder-data.csv")
df2 <- read.csv("../data/xAPI-Edu-Data.csv")
df3 <- read.csv("../data/LoanStats.csv")
dfs <- subset(df,Country %in% c("Germany","India","China","United States","Japan"))
ggplot(dfs,aes(x=Year,y=Electricity_consumption_per_capita)) + geom_point(aes(size=population,color=Country))+
coord_cartesian(xlim=c(1950,2020))+
labs(subtitle="Electricity consumption vs Year",
title="Bubble chart")+ylab("Electricity consumption")+
scale_size(breaks=c(0,1e+8,0.3e+9,0.5e+9,1e+9,1.5e+9),range=c(1,5))
#df3
#Let's do a histogram first and sub divide into the different grades.
ggplot(df3,aes(x=loan_amnt)) + geom_histogram() + facet_wrap(~grade)
# We cannot see the shapes of the E,F,G grades very clearly. Also all the
#grades have different histogram counts. It would be better to use a density
#plot to compare.
ggplot(df3,aes(x=loan_amnt)) + geom_density() + facet_wrap(~grade)
ggplot(df3,aes(x=loan_amnt)) + geom_density(aes(fill=grade),alpha=1/2) +
scale_fill_brewer(palette="Dark2") + xlab("Loan Amount") + theme_light()
ggplot(RestaurantTips,aes(x=Tip)) + geom_density(aes(color=Day),alpha=0.2) +
scale_fill_brewer(palette="Dark2") + xlab("Tip") + scale_x_continuous(breaks=seq(0,15,1)) + theme_classic()
#Read the data
df_fb <- read.csv("../data/FB.csv")
#Glimpse
glimpse(df_fb)
#Convert date to Character
df_fb$Date <- as.Date(df_fb$Date)
#Daily data plot
ggplot(df_fb,aes(x=Date,y=Close, group=1)) +
geom_line(color="black",na.rm=TRUE)+
ggtitle("Daily Closing Stock Prices: Facebook") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
scale_x_date(date_breaks='3 month')+
theme_bw()
#Use strftime to get the month for each date
df_fb$Month <- strftime(df_fb$Date,"%m")
df_fb$Month <- as.numeric(df_fb$Month)
ggplot(df_fb, aes(Month,Close)) +
geom_point(color="red",alpha=1/2,position = position_jitter(h=0.0,w=0.0))+
geom_line(stat='summary',fun.y=mean, color="blue",size=1)+
scale_x_continuous(breaks=seq(0,13,1))+
ggtitle("Monthly Closing Stock Prices: Facebook")+theme_classic()
states_map <- map_data("state")
glimpse(states_map)
ggplot(states_map, aes(x=long, y=lat, group=group)) +    geom_polygon(fill="white", colour="black")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
# Get map data for world
world_map <- map_data("world")
#world_map
europe <- map_data("world", region=c("Germany", "Spain", "Italy",                                        "France","UK","Ireland"))
ggplot(europe, aes(x=long, y=lat, group=group, fill=region)) +    geom_polygon(colour="black") + scale_fill_brewer(palette="Set3")
USStates$Statelower <- as.character(tolower(USStates$State))
glimpse(USStates)
us_data <- merge(USStates,states_map,by.x="Statelower",by.y="region")
head(us_data)
ggplot(us_data, aes(x=long, y=lat, group=group, fill=ObamaVote)) +    geom_polygon(colour="black") +
coord_map("mercator")+scale_fill_gradient(low="red",high="blue")
#Using stat-summary - Plot Mean closing price per month.
df_fb$Month <- as.numeric(df_fb$Month)
ggplot(df_fb, aes(Month,Close)) +
geom_point(color="red",alpha=1/2,position = position_jitter(h=0.0,w=0.0))+
geom_line(stat='summary',fun.y=mean, color="blue",size=1)+
geom_line(stat='summary',fun.y=median, color="orange",size=1)+
geom_line(stat='summary',fun.y=quantile, fun.args=list(probs=0.1),
linetype=2,color='green',size=1.)+
geom_line(stat='summary',fun.y=quantile, fun.args=list(probs=0.9),
linetype=2,color='green',size=1.)+
scale_x_continuous(breaks=seq(0,13,1))+
ggtitle("Monthly Closing Stock Prices: Facebook")+theme_classic()
ggplot(dfs, aes(gdp_per_capita,Electricity_consumption_per_capita)) + geom_point(aes(color=Country))+xlim(0,30000)+ stat_smooth(method=lm)
ggplot(dfs, aes(gdp_per_capita,Electricity_consumption_per_capita,color=Country)) + geom_point() + stat_smooth(method=lm)
#Use only continuous variables columns. Drop "Year","Country"
dfs1 <- dfs[,colnames(dfs)[4:9]]
#Remove NA's or correlation won't work
dfs1 <- na.omit(dfs1)
M <- cor(dfs1)
corrplot(M,method="circle")
colnames(dfs1) <- c("gdp","electricity","mort","pov","bmi_m","bmi_f")
M <- cor(dfs1)
corrplot(M,method="number")
corrplot(M,method="pie")
corrplot(M,method="ellipse")
t <- subset(df3,grade=="A")
ggplot(t, aes(total_pymnt_inv,total_rec_prncp,color=grade)) + geom_point() + stat_smooth(method=lm)
ggplot(t, aes(funded_amnt,total_pymnt_inv,color=grade)) + geom_point() +
stat_smooth(method=lm,color=2)
cars
data()
require("Lock5Data")
data()
df_hum <- read.csv("../data/historical-hourly-weather-data/humidity.csv")
df_desc <- read.csv("../data/historical-hourly-weather-data/weather_description.csv")
str(df_hum)
str(df_desc)
View(df_hum)
ggplot(df_hum, aes(x=Miami)) + geom_histogram()
require("ggplot2")
require("tibble")
require("dplyr")
require("Lock5Data")
ggplot(df_hum, aes(x=Miami)) + geom_histogram()
ggplot(RetailSales,aes(x=Month,y=Sales)) + geom_bar()
#ggplot(RetailSales,aes(x=Month,y=Sales)) + geom_bar(stat="identity")
ggplot(RetailSales,aes(x=Month)) + geom_bar()
ggplot(RetailSales,aes(x=Month,y=Sales)) + geom_bar(stat="identity")
# ggplot(RetailSales,aes(x=Month)) + geom_bar()
#Note: months are not ordered.
#Order the months:
#Check levels
levels(RetailSales$Month)
#Check if it has NA vaues
is.na(RetailSales)
#It has NA values so remove them and create a new data set
MyRetailSales <- na.omit(RetailSales)
#Reorder the months
MyRetailSales$Month <-factor(MyRetailSales$Month,
levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
#Plot
ggplot(MyRetailSales,aes(x=Month,y=Sales)) + geom_bar(stat="identity")
#Exercise - Create a boxplot
ggplot(df_hum,aes(x=month,y=Seattle)) + geom_boxplot()
df_hum <- read.csv("../data/historical-hourly-weather-data/humidity.csv")
#Exercise - Create a boxplot
ggplot(df_hum,aes(x=month,y=Seattle)) + geom_boxplot()
View(df_hum)
#Subtopic : Create a boxplot
#Get the months from the datetime variable and create a month column.
df_hum$datetime <- as.character(df_hum$datetime)
df_hum$month <- substr(df_hum$datetime,6,7)
#Display
ggplot(df_hum,aes(x=month,y=Vancouver)) + geom_boxplot()
#Exercise - Create a boxplot
ggplot(df_hum,aes(x=month,y=Seattle)) + geom_boxplot()
ggplot(df_hum,aes(x=month,y=San.Francisco)) + geom_boxplot()
#Subtopic: Scatterplot
a=3.4
v0=27
#Generate some random time numbers
time <- runif(50, min=0, max=200)
distance <- sapply(time, function(x) v0*x + 0.5*a*x^2)
df <- data.frame(time,distance)
ggplot(df,aes(x=time,y=distance)) + geom_point()
ggplot(df,aes(x=time,y=distance)) + geom_line()
#Exercise - Create a Linechart
df_hum$monthn <- as.numeric(df_hum$month)
gp1 <- group_by(df_hum,monthn)
gp1 <- na.omit(gp1)
dfgp1 <- dplyr::summarise(gp1,med = median(Vancouver),
mean=mean(Vancouver),sd=sd(Vancouver),n=n())
ggplot(data = dfgp1, aes(x=monthn,y=mean)) + geom_line()
#Exercise - Create a Linechart
df_hum$monthn <- as.numeric(df_hum$month)
gp1 <- group_by(df_hum,monthn)
gp1 <- na.omit(gp1)
dfgp1 <- dplyr::summarise(gp1,med = median(Vancouver),
mean=mean(Vancouver),sd=sd(Vancouver),n=n())
ggplot(data = dfgp1, aes(x=monthn,y=mean)) + geom_line() + xlab("Month") +
ylab("Mean Humidity")
#Grammar of Graphics (Changing the defaults using layered structure)
#Subtopic: Understanding and using grammar of graphics
#Rebinning
ggplot(df_hum,aes(x=Vancouver))+geom_histogram()+ggtitle("Default Binning")
ggplot(df_hum,aes(x=Vancouver))+geom_histogram(bins=15)+ggtitle("Rebinned")
#Improve plot by chaging defaults
ggplot(df_hum,aes(x=Vancouver))+
geom_histogram(bins=15,fill="white",color=1)+
ggtitle("Humidity for Vancouver city")+
xlab("Humidity")+
theme(axis.text.x=element_text(size = 12),
axis.text.y=element_text(size=12))
#Checking the theme options
?theme
#Improve plot by chaging defaults
ggplot(df_hum,aes(x=Vancouver))+
geom_histogram()+
ggtitle("Humidity for Vancouver city")+
xlab("Humidity")+
theme(axis.text.x=element_text(size = 12),
axis.text.y=element_text(size=12))
#Checking the theme options
?theme
#Improve plot by chaging defaults
ggplot(df_hum,aes(x=Vancouver))+
geom_histogram(bins=15,fill="white",color=1)+
ggtitle("Humidity for Vancouver city")+
xlab("Humidity")+
theme(axis.text.x=element_text(size = 12),
axis.text.y=element_text(size=12))
#Checking the theme options
?theme
library(ggplot2)
#Generate some random time numbers
library(ggplot2)
time <- runif(50, min=0, max=200)
distance <- sapply(time, function(x) v0*x + 0.5*a*x^2)
df <- data.frame(time,distance)
p <- ggplot(df,aes(x=time,y=distance)) + geom_point()
#Generate some random time numbers
library(ggplot2)
time <- runif(50, min=0, max=200)
distance <- sapply(time, function(x) v0*x + 0.5*a*x^2)
df <- data.frame(time,distance)
p <- ggplot(df,aes(x=time,y=distance)) + geom_point()
p
#Generate some random time numbers
library(ggplot2)
time <- runif(50, min=0, max=200)
distance <- sapply(time, function(x) v0*x + 0.5*a*x^2)
df <- data.frame(time,distance)
p <- ggplot(df,aes(x=time,y=distance)) + geom_point()
ggplotly(p)
#Generate some random time numbers
library(plotly)
time <- runif(50, min=0, max=200)
distance <- sapply(time, function(x) v0*x + 0.5*a*x^2)
df <- data.frame(time,distance)
p <- ggplot(df,aes(x=time,y=distance)) + geom_point()
ggplotly(p)
hist(airquality$Temp)
p1 <- qplot(airquality$Temp)
ggplotly(p1)
